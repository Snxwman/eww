; TODO : Move volume-output/input to a script if required
(defpoll volume-output :interval "1s" '$HOME/.config/rancid/scripts/volume get output')
(defpoll volume-input :interval "1s" '$HOME/.config/rancid/scripts/volume get input')

(defvar volume-reveal false)
(defvar volume-output-mute false)
(defvar volume-input-mute false)

(defvar rancid-popup "$HOME/.config/rancid/scripts/popup")
(defvar rancid-volume "$HOME/.config/rancid/scripts/volume")

(defwidget volume-control [
    ?theme ?style ?type
    ?box-classes ?button-classes
    ?space-evenly ?orientation ?halign
]
    (box 
	:class "volume-widget 
		${theme} 
		${theme}-volume-widget 
		${style} 
		${style}-volume-widget 
		${box-classes} 
		"
	:space-evenly '${space-evenly ?: false}'
	:orientation '${orientation ?: "h"}'
	:halign '${halign ?: "start"}'
	(button 
	    :class "volume-button
		    ${theme}
		    ${theme}-volume-button 
		    ${style} 
		    ${style}-volume-button 
		    ${button-classes}
		    "
	    :onclick "${rancid-popup} volume"
	    "")))

(defwidget volume-window [
    ?theme ?style ?type
    ?box-classes ?button-classes
    ?space-evenly ?orientation ?halign
    ?window-classes
    ]
    (box 
	:class "volume-window 
		${theme} 
		${theme}-volume-window 
		${style} 
		${style}-volume-window 
		${window-classes}"
	:orientation "v"
	:halign "center"
	(box
	    :orientation "h"
	    :space-evenly false
	    (button
		:class "mute-button 
			${theme} 
			${theme}-mute-button 
			${style}
			${style}-mute-button 
			${button-classes}
			"
		:onclick "${rancid-volume} mute output"
		"${volume-output-mute ? '󰝟' : '󰕾'}")
	    (scale 
		:width 250
		:value volume-output
		:orientation "h"
		; TODO : Move this to its own script for different volume controls
		:onchange "${rancid-volume} change output {}")
		)
	(box
	    :orientation "h"
	    :space-evenly false
	    (button
		:class "mute-button 
			${theme} 
			${theme}-mute-button 
			${style}
			${style}-mute-button 
			${button-classes}
			"
		:onclick "${rancid-volume} mute input"
		"${volume-input-mute ? '󰍭' : '󰍬'}")
	    (scale
		:width 250
		:value volume-input
		:orientation "h"
		; TODO : Move this to its own script for different volume controls
		:onchange "${rancid-volume} change input {}"))))
	

(defwindow volume 
    :geometry (geometry
	:x "0px"
	:y "120px"
	:anchor "top center"
	:width "300px"
	:height "100px")
    (volume-window))
